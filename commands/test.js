const fs = require('fs');
const { execSync, exec } = require('child_process');
const parseCommand = require('../util/parseCommand');
const path = require('path');
const getExtension = require('../util/getExtension');
const { cyan, green, red } = require('chalk');
const Diff = require('diff');

module.exports = async problem => {
	try {
		if (!fs.existsSync('.info')) {
			throw Error('Please run inside a folder generated by cf contest');
		}
		problem = problem.toUpperCase();
		const info = JSON.parse(fs.readFileSync('.info'));
		const extension = info.template.extension;
		if (!fs.existsSync(`${problem}.${extension}`)) {
			throw Error('Problem not present in this contest.');
		}
		const filePath = path.join(__dirname, `${problem}.${extension}`);
		if (info.template.pre_run) {
			console.log(cyan('Compiling...'));
			const pre_run_body = execSync(
				parseCommand(info.template.pre_run, filePath)
			);
			console.log(green('Compiled ✔️'));
			console.log(pre_run_body.toString());
		}

		const testFolderPath = `.tests/${problem}`;
		const files = fs.readdirSync(testFolderPath);
		const inputFiles = files.filter(
			filename => getExtension(filename) === 'inp'
		);
		if (inputFiles.length === 0) {
			console.log(red('No Test Cases present. Parse the contest again.'));
			return;
		}
		for (const file of inputFiles) {
			const testNumber = file.split('.')[0];
			console.log(cyan(`Running Test ${testNumber}`));
			exec(
				`cat ${path.join(testFolderPath, file)} | ${path.resolve(
					parseCommand(info.template.run, filePath)
				)}`,
				(err, output) => {
					if (err !== null) {
						console.log(err);
						throw Error();
					}

					output = output.replace(/\r/g, '').trim();
					let expectedOutput = fs
						.readFileSync(`${testFolderPath}/${testNumber}.out`)
						.toString()
						.replace(/\r/g, '')
						.trim();
					expectedOutput += '\n';
					output += '\n';
					const diff = Diff.diffLines(output, expectedOutput);
					let isDiff = false;
					diff.forEach(part => {
						// green for additions, red for deletions
						// grey for common parts
						if (part.added || part.removed) {
							isDiff = true;
						}

						const color = part.added ? 'green' : part.removed ? 'red' : 'grey';
						process.stderr.write(part.value[color]);
					});

					console.log();

					if (isDiff) {
						console.log(red('Failed ❌'));
						return;
					} else {
						console.log(green('Passed ✔️'));
					}
				}
			);
		}
		//:TODO Complete post_run command
	} catch (e) {
		console.log(`${e}`);
	}
};
